const a=require("express"),b=require("axios"),c=require("express-rate-limit"),d=require("crypto"),e=require("winston"),f=require("dotenv").config(),g=a(),h=process.env.PORT||10000,i=e.createLogger({level:"info",format:e.format.combine(e.format.timestamp(),e.format.json()),transports:[new e.transports.Console()]});f.NODE_ENV!=="production"&&i.add(new e.transports.File({filename:"combined.log"}));const j=new Map,k=new Map,l=new Map;g.use(a.json());g.use(a.static("public",{etag:!1,lastModified:!1}));g.use((m,n,o)=>{m.clientIp=m.headers["x-forwarded-for"]?.split(",")[0]||m.ip||m.connection.remoteAddress,m.clientDevice=m.headers["user-agent"]||"unknown",m.clientFingerprint=m.body.deviceInfo?m.body.deviceInfo.fingerprint:`${m.clientIp}-${m.clientDevice}-${m.headers["accept"]||""}`.slice(0,100),i.info(`Request from IP: ${m.clientIp}, Device: ${m.clientDevice}, Fingerprint: ${m.clientFingerprint}`),o()});g.post("/get-csrf-token",(m,n)=>{const o=m.clientIp,p=m.body.deviceInfo,q=p.fingerprint,r=Date.now(),s=j.get(q)||{timestamp:r,count:0,ipBlocked:new Map};for(let[t,u]of j.entries())u.ipBlocked.get(o)&&t!==q&&(Math.ceil((u.timestamp+3e5-r)/1e3)>0&&(i.info(`IP ${o} blocked from Fingerprint ${t}, blocking new Fingerprint ${q}`),s.ipBlocked.set(o,!0),s.timestamp=r,j.set(q,s),n.json({status:429,remainingTime:Math.ceil((u.timestamp+3e5-r)/1e3)})));if(s.ipBlocked.size>0){const t=Math.ceil((s.timestamp+3e5-r)/1e3);if(t>0&&(s.ipBlocked.get(o)||[...s.ipBlocked.values()].some(u=>u))){i.info(`Fingerprint ${q} or IP ${o} blocked, remaining time: ${t}s`);return n.json({status:429,remainingTime:t})}t<=0&&(s.ipBlocked.clear(),s.count=0)}const t=d.randomBytes(16).toString("hex");k.set(o,t),setTimeout(()=>k.delete(o),6e4),j.set(q,s),i.info(`Generated CSRF token for IP ${o}`),n.json({csrfToken:t,status:200})});const m=c({windowMs:6e4,max:10,keyGenerator:n=>n.clientIp,handler:(n,o)=>{i.info(`Flood limit hit for IP ${n.clientIp}`),o.status(429).json({status:429,message:"Too many check requests. Please wait."})}});g.get("/check-rate-limit",m,(n,o)=>{const p=n.clientIp,q=n.clientFingerprint,r=j.get(q)||{timestamp:0,count:0,ipBlocked:new Map},s=Date.now();r.timestamp===0||s-r.timestamp>=3e5&&(r={timestamp:s,count:0,ipBlocked:new Map},j.set(q,r));const t=Math.ceil((r.timestamp+3e5-s)/1e3),u=r.ipBlocked.get(p)||!1;i.info(`Checking rate limit for IP ${p}, Fingerprint: ${q}, count: ${r.count}, remainingTime: ${t}s, IP Blocked: ${u}`),t>0&&r.count>0||u?o.json({status:429,remainingTime:t}):o.json({status:200})});const n=c({windowMs:3e5,max:1,keyGenerator:o=>o.clientIp,handler:(o,p)=>{const q=o.clientFingerprint,r=o.clientIp,s=j.get(q)||{timestamp:0,count:0,ipBlocked:new Map},t=Math.ceil((s.timestamp+3e5-Date.now())/1e3);i.info(`Rate limit hit for IP ${r}, Fingerprint: ${q}, remaining time: ${t}s, IP Blocked: ${s.ipBlocked.get(r)}`),p.status(429).json({success:!1,message:"Too many attempts. Please try again later.",status:429,remainingTime:t>0?t:0})},skip:(o,p)=>{const q=o.clientIp,r=o.clientFingerprint,s=Date.now(),t=j.get(r);if(!t||s-t.timestamp>=3e5)t={timestamp:s,count:0,ipBlocked:new Map},j.set(r,t);for(let[u,v]of j.entries())v.ipBlocked.get(q)&&u!==r&&(Math.ceil((v.timestamp+3e5-s)/1e3)>0&&(i.info(`IP ${q} blocked from Fingerprint ${u}, blocking new Fingerprint ${r}`),t.ipBlocked.set(q,!0),t.timestamp=s,j.set(r,t),p(!1)));if(t.ipBlocked.size>0){const u=Math.ceil((t.timestamp+3e5-s)/1e3);if(u>0&&[...t.ipBlocked.values()].some(v=>v)){i.info(`Fingerprint ${r} blocked, checking IP ${q}`),t.ipBlocked.set(q,!0),j.set(r,t);return!1}}t.count+=1,t.timestamp=s,t.count>1&&(t.ipBlocked.set(q,!0),i.info(`Blocking IP ${q} and Fingerprint ${r} after verification`)),j.set(r,t);const u=t.count<=1&&!t.ipBlocked.get(q);return u}});g.post("/verify",n,(o,p)=>{const q=o.body["g-recaptcha-response"],r=o.body["csrf-token"],s=k.get(o.clientIp),t=o.body.deviceInfo.fingerprint,u=o.clientIp,v=o.clientDevice;i.info(`Verifying for IP ${u}, Fingerprint: ${t}`),(!q||!r||!s||r!==s)&&(i.info("Invalid CSRF token or missing CAPTCHA response"),p.json({success:!1,message:"Invalid CSRF token or missing CAPTCHA response"}));if(!v||v.includes("bot")||v.includes("spider")){i.info("Suspicious User-Agent detected:",v);return p.json({success:!1,message:"Suspicious request detected"})}b.post(`https://www.google.com/recaptcha/api/siteverify?secret=${process.env.RECAPTCHA_SECRET_KEY}&response=${q}`).then(w=>{w.data.success?(i.info(`CAPTCHA verified for IP ${u}`),c="https://www.example.com/success",x=j.get(t)||{timestamp:Date.now(),count:1,ipBlocked:new Map},x.ipBlocked.set(u,!0),x.timestamp=Date.now(),j.set(t,x),p.json({success:!0,message:"CAPTCHA verified successfully!",redirectUrl:c})):(i.info(`CAPTCHA verification failed for IP ${u}, errors: ${w.data["error-codes"]}`),p.json({success:!1,message:"CAPTCHA verification failed"}))}).catch(y=>{i.error(`Error verifying CAPTCHA for IP ${u}: ${y.message}`),p.json({success:!1,message:"Error verifying CAPTCHA"})})}catch(y){i.error(`Exception verifying CAPTCHA for IP ${u}: ${y.message}`),p.json({success:!1,message:"Error verifying CAPTCHA"})}})});g.listen(h,()=>{i.info(`Server running on port ${h}`)});
